将序列分解为单独的变量

问题：
有一个包含N个元素的元组或序列，现在想将他们分解为N个单独的变量

解决方案：
任何序列（或可迭代的对象）都可以通过一个简单的赋值操作来分解为单独的变量。唯一的要求是变量的总数和结构要与序列相吻合。例如：

>>> p = (4, 5)
>>> x, y = p
>>> x
4
>>> y
5
>>> 

>>> data = ['ACME', 50, 91.1, (2012, 12, 21)]
>>> name, shares, price, date = data
>>> name
'ACME'
>>> shares
50
>>> price
91.1
>>> date
(2012, 12, 21)
>>> name, shares, price, (year, mon, day) = data
>>> name
'ACME'
>>> year
2012
>>> mon
12
>>> day
21
>>> 

如果元素的数量不匹配，将得到一个错误提示。例如：
>>> p = (4, 5)
>>> x, y, z = p
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: need more than 2 values to unpack
>>>

讨论
实际上不仅仅只是元组或列表，只有对象恰好是可迭代的，那么就可以执行分解操作。这包括字符串、文件、迭代器以及生成器。例如：

>>> s = 'Hello'
>>> a, b, c, d, e = s
>>> a
'H'
>>> b
'e'
>>> e
'o'
>>> 

当做分解操作时，有时候可能想丢弃某些特定的值，Python并没有提供特殊的语法来实现这一点，但是通常可以选择一个用不到的变量名，以此来作为要丢弃的值的名称。例如：

>>> data = ['ACME', 50, 91.1, (2012, 12, 21)]
>>> _, shares, price, _ = data
>>> shares
50
>>> price
91.1
>>> _
(2012, 12, 21)
>>> 

但是请确保选择的变量名没有在其他地方用到过


